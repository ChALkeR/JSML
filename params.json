{"name":"JSML","body":"## What is JSML?\r\nJSML is a compact representation of HTML using Javascript arrays and objects.  JSML is also a small jQuery plug-in that allows you to construct DOM elements from these structured Javascript objects. Here's a quick example:\r\n\r\n```javascript\r\n$(\"#my-element\").jsml([\"a\", { href: \"http://example.com\" }, \"This is a <link>\" ])\r\n```\r\n\r\nThat finds the div identified by \"my-element\" and replaces its contents with:\r\n\r\n```html\r\n<a href=\"http://example.com\">This is a &lt;link&gt;</a>\r\n```\r\n\r\n...except that there's never an actual HTML string created. JSML uses `document.createElement()`, `document.createTextNode()` and `document.appendChild()` to build up the DOM representation directly which means that you never have to worry about quoting HTML entities which helps prevent XSS ([cross site scripting](https://secure.wikimedia.org/wikipedia/en/wiki/Cross_site_scripting)) attacks by being secure by default.\r\n\r\nHere's a slightly more complicated example:\r\n\r\n```javascript\r\n  $(\"#my-element\").jsml([\"ul\",\r\n                         [\"li\", { style: { backgroundColor: \"red\" } }, \"First item\"],\r\n                         [\"li\",\r\n                          [\"img\", { src: \"myimage.png\", title: \"A title\"},\r\n                                  { alt: \"Some Alt-text\" }], \"Second item\"],\r\n                         $(\"<li>raw html item</li>\")])\r\n```\r\n\r\nAdditional things to notice:\r\n\r\n* The basic idea is that new arrays signal new elements. The first item in an array defines what type of element. The rest of the items in an array are either attributes or child elements.\r\n* Objects (enclosed in \"'{}'\") let you define an element's attributes. You can have multiple objects in the array--they simply accumulate. If you have duplicate keys in the objects then the last one in the array wins.\r\n* As a special case you can drill down into the style with a nested object (though it's not necessarily the best thing to do).\r\n* Style and attribute names are the standard Javascript equivalents (\"border-top\" is \"borderTop\", \"class\" is \"className\").\r\n* You can use jQuery to drop in unquoted HTML strings if you absolutely need to.\r\n\r\n## Advanced Usage\r\nJSML has special support for 'map' functions (Underscore's is shown here):\r\n\r\n```javascript\r\n$(\"#my-element\").jsml([\"ul\",\r\n    _.map([1,2,3], function(num) { return [\"li\", \"Item \"+num] })]);\r\n```\r\n\r\nIf you're paying attention you'll notice that the structure passed to the 'jsml()' function looks like this:\r\n\r\n```javascript\r\n  [\"ul\", [[\"li\", \"Item 1\"],\r\n          [\"li\", \"Item 2\"],\r\n          [\"li\", \"Item 3\"]]]\r\n```\r\n\r\n...which has extra array around the list items unlike the standard syntax:\r\n\r\n```javascript\r\n  [\"ul\", [\"li\", \"Item 1\"],\r\n         [\"li\", \"Item 2\"],\r\n         [\"li\", \"Item 3\"]]\r\n```\r\n\r\nJSML automatically flattens this extra level of arrays to make using 'map()' convenient. This is also useful for passing in an array of uniform items in a JSML structure (which means there's usually no need to use 'concat()').\r\n\r\n```javascript\r\n  var a = [];\r\n  a.push([\"li\", \"Item 1\"],\r\n         [\"li\", \"Item 2\"]);\r\n  $(\"#my-element\").jsml([\"ul\", a]);\r\n```\r\n\r\nYou can also pass DOM element objects and jQuery objects and those will be appended:\r\n\r\n```javascript\r\n  var li = document.createElement(\"li\");\r\n  li.appendChild(document.createTextNode(\"Standard DOM element\"));\r\n  $(\"#my-element\").jsml([\"ul\", li, $(\"<li>jQuery element</li>\")]);\r\n```\r\n\r\nIf you wish to create detached DOM elements you can call either `$.fn.jsml.make()` which returns a jQuery wrapped object, or, `$.fn.jsml.dom()` which returns a standard DOM element object.\r\n\r\n## How Should I Pronounce This?\r\nThere are 3 ways to pronounce it, depending on what you think of the project. If you think it's cool you can call it \"Jay-Smile\", since its compact representation and XSS resistance makes you happy. If you are neutral, you can just call it \"Jay Ess Emm Ell\". If you hate it, feel free to call it \"Jay-Smell\" (and make sure to really sneer when you say it).\r\n\r\n## Author, Copyright, and License\r\nCopyright © 2009-2012 by David Caldwell \\<david@porkrind.org\\> and Jim Radford \\<radford@blackbean.org\\>\r\n\r\nThe JSML source code is licensed under the Mozilla Public License. It is available here: http://mozilla.org/MPL/2.0/\r\n","tagline":"Create XSS free DOM trees easily and beautifully from jQuery","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}